spring.datasource.url=jdbc:postgresql://localhost:5432/cinema_vozd
spring.datasource.username=admin
spring.datasource.password=admin

#JPA dialect
#Warning da ne treba -> testirati
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Logging SQL statements
spring.jpa.show-sql=false

spring.jpa.hibernate.ddl-auto=none

#AWS configuration
aws.access.key=${AWS_ACCESS_KEY}
aws.secret.key=${AWS_SECRET_KEY}
aws.s3.bucket=${AWS_S3_BUCKET:bioskop.vozdovac}

app.client.url=http://localhost:3000

spring.servlet.multipart.max-file-size=500MB
spring.servlet.multipart.max-request-size=500MB

STRIPE_SECRET_KEY={STRIPE_SECRET_KEY}

spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=myGroup
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.properties.spring.json.trusted-packages=com.master.BioskopVozdovac.kafka
spring.kafka.consumer.properties.spring.json.trusted-packages=com.master.BioskopVozdovac.kafka
spring.kafka.consumer.properties.spring.json.value.default.type=com.master.BioskopVozdovac.kafka.Student

spring.kafka.producer.bootstrap-servers=http://127.0.0.1:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.producer.properties.schema.registry.url=http://127.0.0.1:8081

server.port=8084

topic.name=employee
topic.confirmation=created-ticket_avro
